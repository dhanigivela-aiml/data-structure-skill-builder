//cod 1
#include <stdio.h>
#define MAX_SIZE 5

char orders[MAX_SIZE];
int front = -1;
int rear = -1;

void initializeQueue() {
    front = -1;
    rear = -1;
}
int enqueue(char order) {
    if (rear == MAX_SIZE - 1) {
        printf("Queue is full. Cannot enqueue more orders.\n");
        return 0;
    }
    if (front == -1) front = 0;
    orders[++rear] = order;
    printf("Order for %c is enqueued.\n", order);
    return 1;
}

void dequeue() {
    if (front == -1 || front > rear) {
        printf("No orders in the queue.\n");
        return;
    }
    printf("Dequeued Order: %c\n", orders[front++]);
    if (front > rear) initializeQueue();  // Reset queue if empty
}

void display() {
    if (front == -1 || front > rear) {
        printf("Queue is empty. No orders available.\n");
        return;
    }
    printf("Orders in the queue are: ");
    for (int i = front; i <= rear; i++) {
        printf("%c ", orders[i]);
    }
    printf("\n");
}
int main() {
    char order;
    int option;
    initializeQueue();
    while (1) {
        if (scanf("%d", &option) != 1) {
            break;
        }
        switch (option) {
            case 1:
                if (scanf(" %c", &order) != 1) {
                    break;
                }
                if (enqueue(order)) {
                }
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting program");
                return 0;
            default:
                printf("Invalid option.\n");
                break;
        }
    }
    return 0;
}
//cod 2
#include <stdio.h>
#define MAX_SIZE 5

int ticketIDs[MAX_SIZE];
int front = -1;
int rear = -1;
int lastDequeued; 
int enqueue(int ticketID) {
    if (rear == MAX_SIZE - 1) {
        printf("Queue is full. Cannot enqueue.\n");
        return 0;
    }
    if (front == -1) front = 0;
    ticketIDs[++rear] = ticketID;
    printf("Helpdesk Ticket ID %d is enqueued.\n", ticketID);
    return 1;
}

int dequeue() {
    if (front == -1 || front > rear) {
        return 0;
    }
    lastDequeued = ticketIDs[front++];
    if (front > rear) initializeQueue();  // Reset queue if empty
    return 1;
}

void display() {
    if (front == -1 || front > rear) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Helpdesk Ticket IDs in the queue are: ");
    for (int i = front; i <= rear; i++) {
        printf("%d ", ticketIDs[i]);
    }
    printf("\n");
}
int main() {
    int ticketID;
    int option;
    initializeQueue();
    while (1) {
        if (scanf("%d", &option) == EOF) {
            break;
        }
        switch (option) {
            case 1:
                if (scanf("%d", &ticketID) == EOF) {
                    break;
                }
                enqueue(ticketID);
                break;
            case 2:
                if (dequeue()) {
                    printf("Dequeued Helpdesk Ticket ID: %d\n", lastDequeued);
                } else {
                    printf("Queue is empty.\n");
                }
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting the program\n");
                return 0;
            default:
                printf("Invalid option.\n");
                break;
        }
    }
    return 0;
}
//cod 3
#include <stdio.h>
#include <stdlib.h>

#define max 5

int queue[max];
int front = -1, rear = -1;
int insertq(int *data) {
    if (rear == max - 1) {
        return 0; 
    }
    if (front == -1) front = 0;  
    queue[++rear] = *data;
    return 1;  
}

void delq() {
    if (front == -1 || front > rear) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Deleted number is: %d\n", queue[front++]);
    if (front > rear) {
        front = rear = -1;  
    }
}

void display() {
    if (front == -1 || front > rear) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Elements in the queue are: ");
    for (int i = front; i <= rear; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n");
}
int main()
{
    int data, reply, option;
    while (1)
    {
        if (scanf("%d", &option) != 1)
            break;
        switch (option)
        {
            case 1:
                if (scanf("%d", &data) != 1)
                    break;
                reply = insertq(&data);
                if (reply == 0)
                    printf("Queue is full.\n");
                else
                    printf("%d is inserted in the queue.\n", data);
                break;
            case 2:
                delq();  // âœ… Called without arguments
                break;
            case 3:
                display();
                break;
            default:
                printf("Invalid option.\n");
                break;
        }
    }
    return 0;
}
//cod 4
#include <stdio.h>

#define MAX_SIZE 5
int queue[MAX_SIZE];
int front = -1, rear = -1;

void enqueue(int pages) {
    if (rear == MAX_SIZE - 1) {
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }
    if (front == -1) front = 0;
    queue[++rear] = pages;
    printf("Print job with %d pages is enqueued.\n", pages);
}

void dequeue() {
    if (front == -1 || front > rear) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Processing print job: %d pages\n", queue[front++]);
    if (front > rear) front = rear = -1;  // Reset queue when empty
}

void display() {
    if (front == -1 || front > rear) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Print jobs in the queue: ");
    for (int i = front; i <= rear; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n");
}

int main() {
    int option, pages;

    while (1) {
        if (scanf("%d", &option) != 1) break;
        switch (option) {
            case 1:
                if (scanf("%d", &pages) != 1) break;
                enqueue(pages);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting program\n");
                return 0;
            default:
                printf("Invalid option.\n");
                break;
        }
    }
    return 0;
}
//cod 5
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};
void enqueue(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (rear == NULL) {
        front = rear = newNode;
    } else {
        rear->next = newNode;
        rear = newNode;
    }
}
void dequeue() {
    if (front == NULL) {
        return;
    }
    struct Node* temp = front;
    front = front->next;
    if (front == NULL) {
        rear = NULL;
    }
    free(temp);
}
void printFrontRear() {
    if (front && rear) {
        printf("Front: %d, Rear: %d\n", front->data, rear->data);
    } else {
        printf("Queue is empty\n");
    }
}
int main() {
    int n, data;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        enqueue(data);
    }
    printFrontRear();
    printf("Performing Dequeue Operation:\n");
    dequeue();
    printFrontRear();
    return 0;
}
