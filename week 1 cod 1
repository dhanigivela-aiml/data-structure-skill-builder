//cod 1
// You are using GCC
 #include<stdio.h>
 #include<stdlib.h>
 struct Node{
    int coef;
    int exp;
    struct Node* next;
 };
 struct Node* createNode(int coef,int exp){
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->coef=coef;
    newNode->exp=exp;
    newNode->next=NULL;
    return newNode;
 }
 void insertNode(struct Node**head,int coef,int exp){
    struct Node* newNode=createNode(coef,exp);
    if(*head==NULL){
        *head=newNode;
    }else {
struct Node* temp=*head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=newNode;
    }
 }
 struct Node* addPolynomials(struct Node* poly1,struct Node* poly2)
 {
    struct Node* result=NULL;
    struct Node *p1 = poly1, *p2 = poly2;
    while(p1 != NULL || p2 != NULL)  {
        if(p1 != NULL && (p2 == NULL || p1 -> exp > p2 -> exp))  {
            insertNode(&result, p1-> coef, p1 -> exp);
            p1 = p1 -> next;
        }
        else if(p2 != NULL && (p1 == NULL || p2-> exp > p1 -> exp))  {
            insertNode(&result, p2 -> coef, p2 -> exp);
            p2 = p2 -> next;
        }  else  {
            int sumCoef = p1 -> coef + p2 -> coef;
            if(sumCoef != 0)  {
                insertNode(&result, sumCoef, p1 ->exp);
            }
            p1 = p1 -> next;
            p2 = p2 -> next;
        }
    }
    return result;
 }
 int sumCoefficients(struct Node* head) {
    int sum =0;
    struct Node* temp = head;
    while(temp != NULL) {
        sum += temp -> coef;
        temp = temp -> next;
    }
    return sum;
 }
//cod 2
#include <stdio.h>
 #include <stdlib.h>
 void insert(int);
 void display_List();
 void deleteNode(int);
 struct node {
    int data;
    struct node* next;
 } *head = NULL, *tail = NULL;
 void insert(int value){

    struct node* newNode=(struct node*)malloc(sizeof(struct node));
    newNode->data=value;
    newNode->next=NULL;
    if(head==NULL){

        head=newNode;
        tail=newNode;
    }else{
        tail->next=newNode;
        tail=newNode;
  }
 }
 void display_List(){
    struct node* temp=head;
    while(temp != NULL){
        printf("%d ",temp->data);
        temp=temp->next;
    }
    printf("\n");
 }
 void deleteNode(int position){
    if(head==NULL){
        printf("Invalid position.Deletion not possible.\n");
        return;
    }
    struct node* temp=head;
    if(position==1){
        head=head->next;
        free(temp);
        display_List();
        return;
    }
    struct node* prev=NULL;
    for(int i=1;temp!=NULL&&i<position;i++){
        prev=temp;
        temp=temp->next;
    }
    if(temp==NULL){
        printf("Invalid position.Deletion not possible.\n");
        return;
    }
    prev->next=temp->next;
    if(temp==tail){
        tail=prev;
    }
    free(temp);
    display_List();
 }
int main(){
 int num_elements, element, pos_to_delete;
    scanf("%d", &num_elements);
    for (int i = 0; i < num_elements; i++) {
        scanf("%d", &element);
        insert(element);
    }
    scanf("%d", &pos_to_delete);
    deleteNode(pos_to_delete);
    return 0;
 }
//cod 3
 #include<stdio.h>
 #include<stdlib.h>
 typedef struct Node{
    char data;
    struct Node* next;
 }Node;
 Node* createNode(char data){
    Node* newNode=(Node*)malloc(sizeof(Node));
    newNode->data=data;
    newNode->next=NULL;
    return newNode;
}
void insertAfter(Node*head,int index,char newChar){
    Node* temp=head;
    int count =0;
    while(temp!=NULL && count<index){
        temp=temp->next;
        count++;
    }
 if(temp==NULL){
    printf("Invalid index\n");
    return;
    }
    Node* newNode=createNode(newChar);
    newNode->next=temp->next;
    temp->next=newNode;
 }
 void printList(Node* head){
    Node* temp=head;
    printf("Updated list: ");
    while(temp != NULL){
        printf("%c ",temp->data);
        temp=temp->next;
    }
    printf("\n");
 }
 int main(){
    int N,index;
    char newChar;
    scanf("%d",&N);
    Node* head=NULL,*tail=NULL;
    for(int i=0;i<N;i++){
        char ch;
        scanf(" %c",&ch);
        Node* newNode=createNode(ch);
        if(head==NULL)
        head=tail=newNode;
        else{
            tail->next=newNode;
            tail=newNode;
        }
    }
    scanf("%d",&index);
 scanf(" %c",&newChar);
    Node* oldHead=head;
    insertAfter(head,index,newChar);
    printList(oldHead);
    return 0;
 }
